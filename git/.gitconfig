[alias]
  adpc = "!git add . && git pick --continue"
  adrc = "!git add . && git rebase --continue"
  afp = "!git amend && git push -f"
  amend = commit -a --amend --no-edit # amend to the latest commit
  amend-to = !sh -c 'git stash && git edit $1 && git stash pop && git edit --amend' -
  amendm = commit -a --amend # amend to the latest commit with a new commit message
  br = branch
  ca = !git add -A && git commit -av # commit all changes
  ci = commit
  ciaam = "!git add -A && git ciam"
  ciam = commit -am
  cim = commit -m
  clear = "!git reset .; git co .; git clean -f"
  co = checkout
  cod = checkout -
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f" # credit an author on the latest commit
  diffc = diff --cached
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d; git remote -v update -p" # delete merged branches
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f" # switch to a branch, create and switch if it doesn't exist
  l = log --pretty=format:'%h %Cred%an %C(auto)%ar %Cgreen"%s"' # view abbreviated SHA, author, relative date and message on a single line
  new = !sh -c 'git checkout -b "lara/$0"'
  parent-update = "!git co master && git fetch parent && git reset --hard parent/master && git checkout - && git rebase master"
  pick = cherry-pick
  pl = pull
  pls = "!git pull && git push"
	pr = !"pr() { git fetch origin pull/$1/head:pr-$1; git checkout pr-$1; }; pr" # checkout a GitHub PR from origin
  ps = push
  rbmn = "!git checkout main && git fetch origin && git reset --hard origin/main && git checkout - && git rebase main" # rebase from main
  rbmr = "!git checkout master && git fetch origin && git reset --hard origin/master && git checkout - && git rebase master" # rebase from master
  reb = "!r() { git rebase -i HEAD~$1; }; r" # interactive rebase of the last given number of commits
  st = status -sb
  uncommit = reset --soft HEAD^ # undo the last commit

  request = "!~/dotfiles/bin/git-pull-request"
[apply]
  whitespace = nowarn
[branch]
  autosetuprebase = always
[core]
  excludesfile = ~/.gitignore_global
  editor = vim
  trustctime = false # <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
[fetch]
  prune = true
[hub]
  protocol = https
[merge]
  log = true # include summaries of merged commits in newly created merge commit messages
[pull]
  rebase = true
  prune = true
[push]
  default = current
[rebase]
  autoStash = true
[rerere]
  enabled = true # store resolved rebase steps even when aborted
